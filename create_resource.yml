---
- hosts: localhost  # put localhost.  We are processing against aws
  connection: local  # put local.  We are processing against aws
  gather_facts: False  # don't gather facts against localhost
  vars_files:
  -  playbook_vars/{{ global_var_environment }}/app_server_vars.yml 
  vars:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    
  tasks:
  - name: create a new ec2 VPC
    # create a vpc with name, cidr block,dns support, and tenancy
    ec2_vpc_net:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      name: "{{ vpc_name }}" 
      cidr_block: "{{ vpcCidrBlock }}"
      region: "{{ region }}"
      # enable dns support 
      dns_support: yes
      # enable dns hostnames
      dns_hostnames: yes
      tenancy: default
      state: "{{ state }}"
    register: ec2_vpc_net_result

  - name: create ec2 vpc internet gateway       
    # create an internet gateway for the vpc
    ec2_vpc_igw:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}" 
      tags:
        Name: "{{ igw_name }}"
    register: igw_result

  - name: create ec2 vpc subnet
    # create the subnet for the vpc with a cidr block
    ec2_vpc_subnet:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone }}"      # az is the availability zone
      state: "{{ state }}"
      cidr: "{{ subNetCidrBlock }}"
      # enable public ip
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name }}"
    register: subnet_result

  - name: create ec2 security group
    # create a security group for the vpc
    ec2_group:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ security_group_name }}"
      description: "{{ security_group_name }}"
      tags:
        Name: "{{ security_group_name  }}"
      rules:
      - proto: tcp
        ports:
        - 22
        cidr_ip: "{{ port22CidrBlock }}"
        rule_desc: allow all on port 22
    register: security_group_results

  - name: create ec2 VPC Network access control list
    # create the access control list with ingress and egress ports 
    ec2_vpc_nacl:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ acl_name }}"
      subnets: [ "{{ subnet_result.subnet.id }}" ]
      tags:
        Name: "{{ acl_name }}"
        Description: "{{ acl_name }}"
      # ingress acl rules
      ingress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow ingress port 22
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        # allow ingress port 80
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow icmp
        - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
        # allow ingress ephemeral ports
        - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
      # egress acl rules
      egress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow egres port 22 
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        # allow egres port 80 
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow egress ephemeral ports
        - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
    register: acl_results

  - name: create ec2 VPC public subnet route table
    # create route table and connect subnet to routes
    ec2_vpc_route_table:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      tags:
        Name: "{{ route_table_name }}"
      subnets: [ "{{ subnet_result.subnet.id }}" ]
      
      # create routes
      routes:
        - dest: "{{ destinationCidrBlock }}" 
          gateway_id: "{{ igw_result.gateway_id }}"
    register: public_route_table

  # - name: Create ED25519 key pair
  #   amazon.aws.ec2_key:
  #     aws_access_key: "{{ aws_access_key }}"
  #     aws_secret_key: "{{ aws_secret_key }}"
  #     region: "{{ region }}"
  #     name: "{{ ec2_key_pair }}"
  #     key_type: ed25519
  #   register: key_pair_result

  - name: Create an SSH key for access
    shell: > 
        ssh-keygen -b 4096 -t rsa -N "" -f ~/.ssh/legalfind_id_rsa
        creates="~/.ssh/legalfind_id_rsa"

  - name: create key pair using key_material obtained using 'file' lookup plugin
    amazon.aws.ec2_key:
      name: "{{ ec2_key_pair }}"
      key_material: "{{ lookup('file', '~/.ssh/legalfind_id_rsa.pub') }}"

  - name: List contents of the ssh
    shell: >
        cat ~/.ssh/legalfind_id_rsa.pub
    register: file_content

  # - name: "Print the file content to a console"
  #   debug:
  #     msg: "{{ file_content.stdout }}"

  - name: launching EC2 instance using Ansible
    # Launching an EC2 instance
    amazon.aws.ec2_instance:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      key_name: "{{ ec2_key_pair }}"
      instance_type: t2.micro 
      image_id: "{{ ec2_image_ami }}" 
      region: "{{ region }}" 
      wait: yes 
      count: 1
      state: running
      vpc_subnet_id: "{{ subnet_result.subnet.id }}"
      network:
        assign_public_ip: true
        security_group: "{{ security_group_name }}"
    register: ec2_results

  - name: Print Public IP for the EC2 instance
    debug: 
      msg: "{{ ec2_results.instances[0].public_ip.network_interfaces.association.public_ip }}"

  - name: Create the ansible hosts file
    become: True
    file:  
      path: /etc/ansible/hosts
      state: touch

  - name: Set Ip as an ansible hosts
    become: True
    copy: 
      destination: /etc/ansible/hosts
      content: |
        [legalfindhost]
        {{ ec2_results.instances[0].public_ip.network_interfaces.association.public_ip }}
         
    
  # - name: print out new vpc, subnet id, and security group for vpc
  #   # print out new subnet id and security group
  #   debug:
  #     msg: "To use the new created VPC: {{ vpc_name }}; Use subnet id: {{ subnet_result.subnet.id }} and security group: {{ security_group_results.group_id }} to create your AWS instances "
  
    